input {
    file {
        type => "glance"
        start_position => "beginning"
        path => ["/var/log/glance/api.log",
                 "/var/log/glance/registry.log",
                 "/var/log/glance/scrubber.log"]
    }
    file {
        path => "/var/log/keystone/keystone.log"
        start_position => "beginning"
        type => "keystone"
    }
    file {
        type => "nova"
        start_position => "beginning"
        path => ["/var/log/nova/nova-consoleauth.log",
                 "/var/log/nova/nova-api.log",
                 "/var/log/nova/nova-manage.log",
                 "/var/log/nova/nova-network.log",
                 "/var/log/nova/nova-scheduler.log",
                 "/var/log/nova/nova-xvpvncproxy.log",
                 "/var/log/nova/nova-compute.log"]
    }
    file {
        path => "/var/log/nova/quantum-server.log"
        start_position => "beginning"
        type => "quantum"
    }
    file {
        type => "apache-access"
        start_position => "beginning"
        path => ["/var/log/apache2/access.log",
                 "/var/log/nginx/access.log",
                 "/var/log/apache2/other_vhosts_access.log"]
    }
    file {
        type => "apache-error"
        start_position => "beginning"
        path => [
            "/var/log/apache2/error.log",
            "/var/log/nginx/error.log"
        ]
    }
    file {
        type => "rabbitmq"
        start_position => "beginning"
        path => [
            "/var/log/rabbigmq/rabbit.log"
        ]
    }
    file {
        type => "libvirt"
        start_position => "beginning"
        path => [
            "/var/log/libvirt/libvirtd.log"
        ]
    }
}

filter {
    grok {
        type => "glance"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:response}%{SPACE} %{AUDITLOGLEVEL:level} \[%{PROG:program}\] %{GREEDYDATA:message}"
    }
    grok {
        type => "keystone"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }
    grok {
        type => "nova"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"
    }
    grok {
        type => "quantum"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{SPACE} %{LOGLEVEL:level} \[%{PROG:program}\] %{GREEDYDATA:message}"
    }
    grok {
        type => "apache-access"
        pattern => "%{COMBINEDAPACHELOG}"
    }
    grok {
        type => "apache-error"
        pattern => "\[%{APACHE_DATETIME_ERROR:timestamp}\] \[%{APACHE_LOG_LEVEL:level}\] %{GREEDYDATA:message}"
    }
    grok {
        type => "rabbitmq"
        pattern => "=%{LOGLEVEL:level} REPORT==== %{RABBITMQ_DATE:timestamp} ==="
    }
    grok {
        type => "libvirt"
        pattern => "%{TIMESTAMP_ISO8601:timestamp}: %{NUMBER:code}: %{LOGLEVEL:level} : %{GREEDYDATA:message}"
    }
    date {
        timestamp => "yyyy-MM-dd HH:mm:ss.SSSZ"
        timestamp => "dd-MMM-YYYY::HH:mm:ss"
        timestamp => "yyyy-MM-dd HH:mm:ss,SSS"
        timestamp => "yyyy-MM-dd HH:mm:ss.SSS"
        timestamp => "yyyy-MM-dd HH:mm:ss"
        timestamp => "EEE MMM DD HH:mm:ss YYYY"
        timestamp => "dd/MMM/yyyy:HH:mm:ss Z"
        timestamp => "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
    }
    multiline {
        type => "glance"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    multiline {
        type => "keystone"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    multiline {
        type => "nova"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    multiline {
        type => "rabbitmq"
        pattern => "^="
        negate => true
        what => "previous"
    }
}

output {
    zeromq {
        address => ["tcp://ip1:2120", "tcp://ip2:2120"]
        topology => "pushpull"
    }

    statsd {
        type => "apache-access"
        host => "localhost"
        port => 8125
        namespace => "openstratus"
        increment => "apache.response.%{fields.response}"
    }

    statsd {
        type => "glance"
        host => "127.0.0.1"
        port => 8125
        namespace => "glance"
        increment => "%{@source_path}.%{level}"
    }
    statsd {
        type => "nova"
        host => "127.0.0.1"
        port => 8125
        namespace => "nova"
        increment => "%{@source_path}.%{level}"
    }
    statsd {
        type => "keystone"
        host => "127.0.0.1"
        port => 8125
        namespace => "keystone"
        increment => "%{@source_path}.%{level}"
    }
    statsd {
        type => "apache-access"
        host => "127.0.0.1"
        port => 8125
        namespace => "apache"
        increment => "%{@source_path}.%{response}"
    }
    statsd {
        type => "apache-error"
        host => "127.0.0.1"
        port => 8125
        namespace => "apache"
        increment => "%{@source_path}.%{level}"
    }
    statsd {
        type => "libvirt"
        host => "127.0.0.1"
        port => 8125
        namespace => "libvirt"
        increment => "%{@source_path}.%{level}"
    }
    statsd {
        type => "rabbitmq"
        host => "127.0.0.1"
        port => 8125
        namespace => "rabbitmq"
        increment => "%{@source_path}.%{level}"
    }
}


input {
  file {
    path => ['/var/log/nova/nova-api.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-conductor.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-manage.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-scheduler.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-spicehtml5proxy.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/keystone/keystone-all.log']
    tags => ['keystone', 'keystonefmt']
    type => "keystone"
  }
  file {
    path => ['/var/log/keystone/keystone-manage.log']
    tags => ['keystone', 'keystonefmt']
    type => "keystone"
  }
  file {
    path => ['/var/log/glance/api.log']
    tags => ['glance', 'oslofmt']
    type => "glance"
  }
  file {
    path => ['/var/log/glance/registry.log']
    tags => ['glance', 'oslofmt']
    type => "glance"
  }
  file {
    path => ['/var/log/glance/scrubber.log']
    tags => ['glance', 'oslofmt']
    type => "glance"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-agent-central.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-alarm-notifier.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-api.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-alarm-evaluator.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-collector.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/heat/heat.log']
    tags => ['heat', 'oslofmt']
    type => "heat"
  }
  file {
    path => ['/var/log/neutron/neutron-server.log']
    tags => ['neutron', 'oslofmt']
    type => "neutron"
  }
# Not collecting RabbitMQ logs for the moment
#  file {
#    path => ['/var/log/rabbitmq/rabbit@<%= @hostname %>.log']
#    tags => ['rabbitmq', 'oslofmt']
#    type => "rabbitmq"
#  }
  file {
    path => ['/var/log/httpd/access_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/httpd/error_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/httpd/horizon_access_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/httpd/horizon_error_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/els/els-notifications-consumer.log']
    tags => ['els']
    type => "els-notifications"
  }
}
filter {
  if "oslofmt" in [tags] {
    multiline {
      negate => true
      pattern => "^%{TIMESTAMP_ISO8601} "
      what => "previous"
    }
    multiline {
      negate => false
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}%{NUMBER}?%{SPACE}?TRACE"
      what => "previous"
    }
    grok {
      # Do multiline matching as the above mutliline filter may add newlines
      # to the log messages.
      # TODO move the LOGLEVELs into a proper grok pattern.
      match => { "message" => "(?m)^%{TIMESTAMP_ISO8601:logdate}%{SPACE}%{NUMBER:pid}?%{SPACE}?(?<loglevel>AUDIT|CRITICAL|DEBUG|INFO|TRACE|WARNING|ERROR) \[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logmessage}?" }
      add_field => { "received_at" => "%{@timestamp}" }
    }

  } else if "keystonefmt" in [tags] {
    grok {
      # Do multiline matching as the above mutliline filter may add newlines
      # to the log messages.
      # TODO move the LOGLEVELs into a proper grok pattern.
      match => { "message" => "(?m)^%{TIMESTAMP_ISO8601:logdate}%{SPACE}%{NUMBER:pid}?%{SPACE}?(?<loglevel>AUDIT|CRITICAL|DEBUG|INFO|TRACE|WARNING|ERROR) \[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logmessage}?" }
      add_field => { "received_at" => "%{@timestamp}" }
    }
    if [module] == "iso8601.iso8601" {
  #log message for each part of the date?  Really?
  drop {}
    }
  } else if "libvirt" in [tags] {
    grok {
       match => { "message" => "(?m)^%{TIMESTAMP_ISO8601:logdate}:%{SPACE}%{NUMBER:code}:?%{SPACE}\[?\b%{NOTSPACE:loglevel}\b\]?%{SPACE}?:?%{SPACE}\[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logmessage}?" }
       add_field => { "received_at" => "%{@timestamp}"}
    }
    mutate {
       uppercase => [ "loglevel" ]
    }
  } else if [type] == "syslog" {
     grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:logmessage}" }
        add_field => [ "received_at", "%{@timestamp}" ]
     }
     syslog_pri {
        severity_labels => ["ERROR", "ERROR", "ERROR", "ERROR", "WARNING", "INFO", "INFO", "DEBUG" ]
     }
     date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
     }
     if !("_grokparsefailure" in [tags]) {
        mutate {
           replace => [ "@source_host", "%{syslog_hostname}" ]
        }
     }
     mutate {
        remove_field => [ "syslog_hostname", "syslog_timestamp" ]
        add_field => [ "loglevel", "%{syslog_severity}" ]
        add_field => [ "module", "%{syslog_program}" ]
     }
  }
}