input {
  lumberjack {
    port => 5043
    ssl_certificate => "/etc/logstash/logstash-forwarder.crt"
    ssl_key => "/etc/logstash/logstash-forwarder.key"
    type => "mixed-data"
  }
  collectd 
  {
    type => "meters"
  }
}

filter {
	if [message] =~ /^REQ: / {
		mutate { add_tag => "debug" }
	}
}

# METERS
filter {
  if [plugin] == "snmp" { # Ignore drive stats we don't care about
	if [type_instance] in ["_sys_fs_cgroup", "_var_log", "_dev_shm", "_run", "_tmp", "_var_tmp"] {
		drop { }
	}
	if [type_instance] {
	  mutate {
		add_field => { "host_dev_instance" => "%{host} %{type_instance}" }
	  }
	}
	if [used] and [free] {
        	ruby { 
            		code => "event['percent_free'] = ( event['free'] / ( event['used'] + event['free'] ) * 100 ).round(2)"
        	}
    	}
	if [collectd_type] == "df" and [percent_free] < 15 {
		mutate {
			add_field => { "message" => "Drive getting full: %{host_dev_instance}" } 
			add_tag => "alert" 
		}
	}
	if [collectd_type] == "users" and [value] > 0 {
		mutate { 
			add_field => { "message" => "Someone logged in to %{host}" } 
			add_tag => "alert" 
		}
	}
	throttle {
		period => 3600 
		before_count => -1 
		after_count => 1
		key => "%{host}%{message}"
		add_tag => "throttled"
	}
  }
}


filter {
	grok {
		match => [ 
			"message", "(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} \[%{DATA}\] %{GREEDYDATA:logmessage}",
			"message", "%{SYSLOGLINE}" ]

	}
	if "_grokparsefailure" not in [tags] {
	  if [message] =~ /\/DEBUG\:/ or [message] =~ /\/INFO\:/ {
		drop { }
	  }
# TODO(JMC): Preserve DHCP errors here.
	  if [program] == "dhcpd" {
		drop { }
	  }
	  date {
		match => [ "timestamp", "MMM dd YYY HH:mm:ss",
            	"MMM  d YYY HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
	  }
	  mutate {
		replace => { "type" => "syslog" }
	  }
	}
	if [logsource] {
	  mutate {
		replace => { "host" => "%{logsource}" }
	  }
	}
	if [logmessage] {
	  mutate {
		replace => { "message" => "%{logmessage}" }
	  }
	}
}

output {
	if "alert" in [tags] and "throttled" not in [tags] {
		pagerduty { 
			service_key => "foo"
		}
	}

# TODO(JMC): Use separate Indexes for meters and logs
# Meters are only relevant for minutes.

        elasticsearch {
                host => "127.0.0.1"
                cluster => elasticsearch
#                flush_size => 1
                template_overwrite => true
                manage_template => true
                template => "/opt/logstash/lib/logstash/outputs/elasticsearch/elasticsearch-template.json"
        }
}
