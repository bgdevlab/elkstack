
filter {
	if [message] =~ /^REQ: / {
		drop { }
	}
}
# 
# filter {
#     multiline {
#       pattern => "^%{SYSLOGTIMESTAMP}"
#       negate => "true"
#       what => "previous"
#       add_tag => "multiline"
#     }
#     multiline {
#       pattern => "^\s"
#       what => "previous"
#       add_tag => "multiline"
#     }
# }

filter {
	grok {
		match => [ 
			"message", "(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} \[%{DATA}\] %{GREEDYDATA:logmessage}",
			"message", "%{SYSLOGLINE}" ]

	}
	if "_grokparsefailure" not in [tags] {
	  if [message] =~ /\/DEBUG\:/ or [message] =~ /\/INFO\:/ {
		drop { }
	  }
# TODO(JMC): Preserve DHCP errors here.
	  if [program] == "dhcpd" {
		drop { }
	  }
	  date {
		match => [ "timestamp", "MMM dd YYY HH:mm:ss",
            	"MMM  d YYY HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
	  }
	  mutate {
		replace => { "type" => "syslog" }
	  }
	}
	if [logsource] {
	  mutate {
		replace => { "host" => "%{logsource}" }
	  }
	}
	if [logmessage] {
	  mutate {
		replace => { "message" => "%{logmessage}" }
	  }
	}
    # 
    # multiline {
    #     pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
    #     negate => true
    #     what => "previous"
    # }
}
